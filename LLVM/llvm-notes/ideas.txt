Вариантов вставок 2:
 + export
 + inline

Для анализа inline:
 + скомпилить .ll
 + найти место с `call asm`
 + найти функцию, из которой вызов
 + компилим .o
 + находим адрес функции в которой call asm

Для анализа export:
 + взять все .asm файлы
 + вынуть все функции из symtab
 * найти общие с исследуемым файлом функции

достать все my_ GLOBAL символы: readelf -s -W ./fuzz/factorial | grep -e "GLOBAL.*my_"
достать disasm функции по адресу: objdump -d --start-address=0x4b7c80 --stop-address=0x4b7d80 ./fuzz/factorial

export asm функции встраиваются в конечный исполняемый файл, если они линкуются как объектник
поэтому можно делать так:
+ достать GLOBAL символы из всех asm
+ найти эти же GLOBAL символы в исполняемом файле (пусть даже через python скрипт)
+ использовать адреса из исполняемого файла для анализа

./build/bin/lld -fsanitize=fuzzer ../fuzz.o -o ../fuzz > ../stdout.log 2> ../stderr.log 