# Syntax
## Identifiers

types:
+ global '@'
    - functions
    - global vars
+ local '%'
    - register names
    - types

formats:
+ именованные   : [% | @]my.identifier.name (regex: ‘[%@][-a-zA-Z$._][-a-zA-Z$._0-9]*’)
+ неименованные : [%@]\d
+ константы

; - для комментариев в коде

## String constants

определяется через "string"
внутри всё воспринимается как строка кроме '\xx' и '\\'
для обозначения символа " используется \22

# High Level Structure
## Module Structure

module - базовая единица программы в LLVM IR. 
Each module consists of functions, global variables, and symbol table entries

linker - собирает из модулей программу, выполняя resolve, merge и т.д.

Пример программы:
> ; Declare the string constant as a global constant.
> @.str = private unnamed_addr constant [13 x i8] c"hello world\0A\00"
> 
> ; External declaration of the puts function
> declare i32 @puts(ptr nocapture) nounwind
> 
> ; Definition of main function
> define i32 @main() {
>   ; Call puts function to write out the string to stdout.
>   call i32 @puts(ptr @.str)
>   ret i32 0
> }
> 
> ; Named metadata
> !0 = !{i32 42, null, !"string"}
> !foo = !{!0}

## Linkage Types

global values = functions + global vars = pointer to a memory location
g.v. have one of this linkage types:
+ private
+ internal
+ available_externally
+ linkonce
+ weak
+ common
+ appending
+ extern_weak
+ linkonce_odr, weak_odr
+ external

It is illegal for a global variable or function declaration to have any linkage type other than external or extern_weak.

## Calling Convention

LLVM functions, calls and invokes can all have an optional calling convention specified for the call. 
The calling convention of any pair of dynamic caller/callee must match, or the behavior of the program is undefined.

+ ссс - The C calling convention
+ fastcc
+ ...

## Visability style

All Global Variables and Functions have one of the following visibility styles:
+ default
+ hidden (не помещается в dynsym и у других программ не получится ссылаться на него напрямую)
+ protected (dynsym)

A symbol with internal or private linkage must have default visibility.

## DLL Storage Classes

All Global Variables, Functions and Aliases can have one of the following DLL storage class:
+ dllimport
+ dllexport
A symbol with internal or private linkage cannot have a DLL storage class.

## Thread Local Storage Models

A variable may be defined as `thread_local`, which means that it will not be shared 
by threads (each thread will have a separated copy of the variable). 
Not all targets support thread-local variables. 
Optionally, a TLS model may be specified:
+ localdynamic
    For variables that are only used within the current shared library.
+ initialexec
    For variables in modules that will not be loaded dynamically.
+ localexec
    For variables defined in the executable and only used within it.

If no explicit model is given, the “general dynamic” model is used.
A model can also be specified in an alias, but then it only governs how the alias is accessed. 
It will not have any effect in the aliasee.

## Runtime Preemption Specifiers
маркер для линковщика, где брать реализацию

Global variables, functions and aliases may have an optional runtime preemption specifier. 
If a preemption specifier isn’t given explicitly, then a symbol is assumed to be dso_preemptable.

+ dso_preemptable
+ dso_local

## Structure Types

LLVM IR allows you to specify both “identified” and “literal” structure types. 
Literal types are uniqued structurally, but identified types are never uniqued. 
An opaque structural type can also be used to forward declare a type that is not yet available.

An example of an identified structure specification is:
%mytype = type { %mytype*, i32 }

Prior to the LLVM 3.0 release, identified types were structurally uniqued. 
Only literal types are uniqued in recent versions of LLVM.

## Non-Integral Pointer Type
EXPERIMENTAL
для указателей и объектов неопределённого размера

## Global Variables

Global variables define regions of memory allocated 
at compilation time instead of run-time.
Global variable definitions must be initialized.
