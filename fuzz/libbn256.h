/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */







/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void PrintOC();
extern void ClearAll();
extern GoInt curvePoint_New();
extern char* curvePoint_String(GoInt i);
extern GoUint8 curvePoint_IsOnCurve(GoInt i);
extern void curvePoint_SetInfinity(GoInt i);
extern GoUint8 curvePoint_IsInfinity(GoInt i);
extern void curvePoint_Add(GoInt c_ind, GoInt a_ind, GoInt b_ind);
extern void curvePoint_Double(GoInt c_ind, GoInt a_ind);
extern void curvePoint_Mul(GoInt c_ind, GoInt a_ind, GoInt scalar);
extern void curvePoint_MakeAffine(GoInt c_ind);
extern void curvePoint_Neg(GoInt c_ind, GoInt a_ind);
extern GoInt New_G1(GoInt k);
extern GoInt New_G2(GoInt k);
extern GoInt Add_G1(GoInt e_ind, GoInt i, GoInt j);
extern GoInt Add_G2(GoInt e_ind, GoInt i, GoInt j);
extern GoInt Neg_G1(GoInt e_ind, GoInt i);
extern GoInt Neg_G2(GoInt e_ind, GoInt i);
extern GoInt ScalarBaseMult_G1(GoInt e_ind, GoInt k);
extern GoInt ScalarBaseMult_G2(GoInt e_ind, GoInt k);
extern GoInt ScalarMult_G1(GoInt e_ind, GoInt i, GoInt k);
extern GoInt ScalarMult_G2(GoInt e_ind, GoInt i, GoInt k);
extern GoInt gfP_newGFP(GoInt64 x);
extern char* gfP_String(GoInt i);
extern void gfP_Set(GoInt dst_ind, GoInt src_ind);
extern void gfP_Invert(GoInt dst_ind, GoInt src_ind);
extern void gfP_Add(GoInt c_ind, GoInt a_ind, GoInt b_ind);
extern void gfP_Neg(GoInt c_ind, GoInt a_ind);
extern void gfP_Mul(GoInt c_ind, GoInt a_ind, GoInt b_ind);
extern void gfP_Sub(GoInt c_ind, GoInt a_ind, GoInt b_ind);
extern GoUint8 gfP_Equal(GoInt i, GoInt j);

#ifdef __cplusplus
}
#endif
